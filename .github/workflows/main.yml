name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  build-app:
    runs-on: ubuntu-latest
    needs: [get-publish-version]
    steps:
      - name: Set up Python 3.7
        uses: actions/setup-python@v3
        with:
          python-version: 3.7

      - name: Install dependencies
        uses: actions/checkout@v3
        run: |
          make zip
          set +o pipefail
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          set -o pipefail
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          VERSION_NUMBER=$(echo $VERSION | sed 's/^v\(.*\)$/\1/')
          echo $VERSION_NUMBER > version && zip -ur emr-launcher.zip version
          mv emr-launcher.zip emr-launcher-$VERSION_NUMBER.zip
          
      - persist_to_workspace:
        root: .
        paths:
        - emr-launcher-*.zip
        - Pipfile


  integration-test:
    runs-on: ubuntu-latest
    needs: [build-app]
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          pip install -r requirements.txt
          python -m pytest -v


  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Prepare SemVer
        id: prepare-semver
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo ::set-output name=latest_version_out::$LATEST_VERSION
          commit_message=$( echo "${{ github.event.head_commit.message }}" | sed 's/"//g')
          if [[ "${commit_message,,}" == *"major release"* ]]; then
            echo ::set-output name=semver_increment::"m"
          elif [[ "${commit_message,,}" == *"minor release"* ]]; then
            echo ::set-output name=semver_increment::"i"
          else
            echo ::set-output name=semver_increment::"p"
          fi
      - name: Increment SemVer
        id: semver
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.prepare-semver.outputs.latest_version_out }}
          increment: ${{ steps.prepare-semver.outputs.semver_increment }}
      - name: Get publish version
        id: get-publish-version
        run: |
          echo "::set-output name=publish-version::${{ steps.semver.outputs.semver }}"
  
  
  publish-github-release:
    runs-on: ubuntu-latest
    needs: [build-app, get-publish-version, integration-test]
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false